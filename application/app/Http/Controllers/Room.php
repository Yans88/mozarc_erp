<?php/** -------------------------------------------------------------------------------- * This controller manages all the business logic for team * * @package    Grow CRM * @author     NextLoop *----------------------------------------------------------------------------------*/namespace App\Http\Controllers;use App\Http\Controllers\Controller;use App\Http\Responses\Common\CommonResponse;use App\Http\Responses\Rooms\IndexResponse;use App\Http\Responses\Rooms\StoreResponse;use App\Repositories\RoomRepository;use App\Repositories\GroupRoomsRepository;use App\Repositories\GroupsRoomAssignedRepository;use App\Repositories\UserRepository;use Illuminate\Http\Request;use Illuminate\Support\Facades\Mail;use Illuminate\Validation\Rule;use Validator;use Log;class Room extends Controller {    /**     * The roles repository instance.     */     protected $grouproomsrepo;	 	 	 protected $userrepo;	 	 protected $groupsroomassignedrepository;    /**     * The roms repository instance.     */    		protected $roomrepository;    public function __construct(RoomRepository $roomrepository, GroupRoomsRepository $grouproomsrepo, UserRepository $userrepo, GroupsRoomAssignedRepository $groupsroomassignedrepository ) {        //parent        parent::__construct();        //authenticated        $this->middleware('auth');               //dependencies        				$this->roomrepository = $roomrepository;				$this->grouproomsrepo = $grouproomsrepo;					$this->userrepo = $userrepo;				$this->groupsroomassignedrepository = $groupsroomassignedrepository;    }    /**     * Display a listing of team     * @return \Illuminate\Http\Response     */    public function index() {        		$groups = $this->grouproomsrepo->search();        $chats = $this->roomrepository->search();		        		$list_employee = $this->groupsroomassignedrepository->search_employee();		$employees=[];		if(count($list_employee) > 0){						foreach($list_employee as $le){				$employees[$le->grouproomassigned_groupid][] = array(					'groupassigned_userid'	=> $le->grouproomassigned_userid,					'first_name'			=> $le->first_name,					'groupassigned_id'		=> $le->grouproomassigned_id,				);			}					}							request()->merge([            'type' => 'employee',            'status_employee' => 'inactive',        ]);        $emp_inactive = $this->userrepo->search();        //reponse payload        $payload = [            'page' => $this->pageSettings('room'),            'chats' => array(),					'mygroup' => array(),						'groups' => $groups,						'list_employee' => $employees,						'list_employee_inactive' => $emp_inactive,        ];Log::error($employees);        //show views        return new IndexResponse($payload);    }       /**     * Store a newly created team member in storage.     * @return \Illuminate\Http\Response     */    public function store() {        //custom error messages        $messages = ['groupemployee_id.required' => 'Please select a group',];        //validate        $validator = Validator::make(request()->all(), [            'message' => 'required',       			            'groupemployee_id' => 'required',                            ], $messages);        //errors        if ($validator->fails()) {            $errors = $validator->errors();            $messages = '';            foreach ($errors->all() as $message) {                $messages .= "<li>$message</li>";            }			$jsondata['notification'] = array('type' => 'error', 'value' => $messages);			return response()->json($jsondata);            abort(409, $messages);        }        if (!$chatroom_id = $this->roomrepository->create()) {            abort(409);        }        //reponse payload       $chats = $this->roomrepository->search(request('groupemployee_id'));	   		//reponse payload        $payload = [            'page' => $this->pageSettings('room'),            'chats' => $chats,			        ];        //show views        return new StoreResponse($payload);    }		public function show($id) {		$groups = $this->grouproomsrepo->search();				$chats = $this->roomrepository->search($id);       				$mygroup = $this->grouproomsrepo->get($id);						$employees=[];						request()->merge([            'type' => 'employee',            'status_employee' => 'inactive',        ]);        $emp_inactive = $this->userrepo->search();        //reponse payload        $payload = [            'page' => $this->pageSettings('room'),            'chats' => $chats,				            'mygroup' => $mygroup,  			            'groups' => $groups,  			'list_employee' => $employees,						'list_employee_inactive' => $emp_inactive,        ];        //show views        return new IndexResponse($payload);    }    public function refresh($id) {               $chats = $this->roomrepository->search($id);   		//reponse payload        $payload = [            'page' => $this->pageSettings('room'),            'chats' => $chats,			        ];        //show views        return new StoreResponse($payload);    }          private function pageSettings($section = '', $data = []) {        //common settings        $page = [            'crumbs' => [                __('lang.room'),            ],            'crumbs_special_class' => 'list-pages-crumbs',            'page' => 'room',            'no_results_message' => __('lang.no_results_found'),                       'mainmenu_room' => 'active',            'sidepanel_id' => 'sidepanel-filter-room',            						'action_url' => url('rooms/save'),						'refresh_url' => url('rooms/refresh'),        ];        //default modal settings (modify for sepecif sections)        $page += [            						'leftpanel' => 'pages.rooms.form.leftpanel',						'page_content' => 'pages.rooms.form.content',        ];				$page += [            'add_modal_title' => __('lang.add_group'),            'add_modal_create_url' => url('groups/create'),            'add_modal_action_url' => url('team'),            'add_modal_action_ajax_class' => '',            'add_modal_action_ajax_loading_target' => 'commonModalBody',            'add_modal_action_method' => 'POST',						'dynamic_search_url_group' => url('grouprooms/search?source=rooms'),        ];        config([            //visibility - add project buttton            'visibility.list_page_actions_add_button' => true,        ]);        //contracts list page        if ($section == 'room') {            $page += [                'meta_title' => __('lang.room'),                'heading' => __('lang.room'),            ];            if (request('source') == 'ext') {                $page += [                    'list_page_actions_size' => 'col-lg-12',                ];            }            return $page;        }        //create new resource        if ($section == 'create') {            $page += [							'meta_title' => __('lang.room'),                'heading' => __('lang.room'),                'section' => 'create',                'create_type' => 'room',				                'tabmenu_profile' => 'active',				                'tabmenu_profile_url' => url('employee/create'),								'action_url' => url('employee/save_employee'),				                'page_content' => 'pages.employee.form.content',                            ];            return $page;        }				        //edit new resource        if ($section == 'edit') {            $page += [							'meta_title' => __('lang.employee'),                'heading' => __('lang.employee'),                'section' => 'edit',								'tabmenu_profile' => 'active',								'tabmenu_profile_url' => url('employee/edit/'.$data['id']),								'action_url' => url('employee/update'),				                'page_content' => 'pages.rooms.form.content',								'leftpanel' => 'pages.rooms.form.leftpanel',            ];            return $page;        }        //ext page settings        if ($section == 'ext') {            $page += [                'list_page_actions_size' => 'col-lg-12',            ];            return $page;        }        //return        return $page;    }		}