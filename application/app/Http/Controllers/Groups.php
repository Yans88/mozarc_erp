<?php/** -------------------------------------------------------------------------------- * This controller manages all the business logic for team * * @package    Grow CRM * @author     NextLoop *----------------------------------------------------------------------------------*/namespace App\Http\Controllers;use App\Http\Controllers\Controller;use App\Http\Responses\Common\CommonResponse;use App\Http\Responses\Groups\CreateResponse;use App\Http\Responses\Groups\EditResponse;use App\Http\Responses\Groups\IndexResponse;use App\Http\Responses\Groups\StoreResponse;use App\Http\Responses\Groups\UpdateResponse;use App\Http\Responses\Groups\AssignResponse;use App\Repositories\GroupsRepository;use App\Repositories\UserRepository;use App\Repositories\GroupsAssignedRepository;use Illuminate\Http\Request;use Illuminate\Validation\Rule;use Validator;use Log;class Groups extends Controller {    /**     * The users repository instance.     */    protected $groupsrepo;		protected $userrepo;		protected $groupsassignedrepository;    public function __construct(GroupsRepository $groupsrepo, UserRepository $userrepo, GroupsAssignedRepository $groupsassignedrepository) {        //parent        parent::__construct();        //authenticated        $this->middleware('auth');        //dependencies        $this->groupsrepo = $groupsrepo;				$this->userrepo = $userrepo;				$this->groupsassignedrepository = $groupsassignedrepository;    }    /**     * Display a listing of team     * @return \Illuminate\Http\Response     */    public function index() {				$fullUrl = request()->fullUrl();		$_fullUrl = explode('?', $fullUrl);		$str_source = isset($_fullUrl[1]) ? str_replace('source=','', $_fullUrl[1]) : '';        $groups = $this->groupsrepo->search();        $list_employee = $this->groupsassignedrepository->search_employee();		$employees=[];		if(count($list_employee) > 0){						foreach($list_employee as $le){				$employees[$le->groupassigned_groupid][] = array(					'groupassigned_userid'	=> $le->groupassigned_userid,					'first_name'			=> $le->first_name,					'groupassigned_id'		=> $le->groupassigned_id,				);			}					}        //reponse payload        $payload = [            'groups' => $groups,						'list_employee'	=> $employees,						'str_source'	=> $str_source,        ];        //process reponse        //show views        return new IndexResponse($payload);    }    /**     * Show the form for creating a new team member     * @return \Illuminate\Http\Response     */    public function create() {        //get all team level roles        $roles = array();        //reponse payload        $payload = [            'page' => $this->pageSettings('create'),            'roles' => $roles,        ];        //show the form        return new CreateResponse($payload);    }    /**     * Store a newly created team member in storage.     * @return \Illuminate\Http\Response     */    public function store() {        //custom error messages        $messages = [];        //validate				$fullUrl = request()->fullUrl();		$_fullUrl = explode('?', $fullUrl);		$str_source = isset($_fullUrl[1]) ? str_replace('source=','', $_fullUrl[1]) : '';        $validator = Validator::make(request()->all(), [            'group_name' => 'required',                    ], $messages);        //errors        if ($validator->fails()) {            $errors = $validator->errors();            $messages = '';            foreach ($errors->all() as $message) {                $messages .= "<li>$message</li>";            }            abort(409, $messages);        }        if (!$groupid = $this->groupsrepo->create()) {            abort(409);        }		$groups = $this->groupsrepo->search();				$list_employee = $this->groupsassignedrepository->search_employee();		$employees=[];		if(count($list_employee) > 0){						foreach($list_employee as $le){				$employees[$le->groupassigned_groupid][] = array(					'groupassigned_userid'	=> $le->groupassigned_userid,					'first_name'			=> $le->first_name,					'groupassigned_id'		=> $le->groupassigned_id,				);			}					}        //reponse payload        $payload = [            'groups' => $groups,						'list_employee'	=> $employees,						'str_source'	=> $str_source,        ];        //process reponse        return new StoreResponse($payload);    }    /**     * Show the form for editing the specified team member     * @param int $id team member id     * @return \Illuminate\Http\Response     */    public function edit($id) {	        if (!$groups = $this->groupsrepo->get($id)) {            abort(409, __('lang.user_not_found'));        }        //reponse payload        $payload = [            'page' => $this->pageSettings('edit'),                       'groups' => $groups,        ];        //process reponse        return new EditResponse($payload);    }    /**     * Update profile     * @param int $id team member id     * @return \Illuminate\Http\Response     */    public function update($id) {        //custom error messages        $messages = [                   ];		$fullUrl = request()->fullUrl();		$_fullUrl = explode('?', $fullUrl);		$str_source = isset($_fullUrl[1]) ? str_replace('source=','', $_fullUrl[1]) : '';		        //validate the form        $validator = Validator::make(request()->all(), [            'group_name' => 'required',        ], $messages);        //validation errors        if ($validator->fails()) {            $errors = $validator->errors();            $messages = '';            foreach ($errors->all() as $message) {                $messages .= "<li>$message</li>";            }            abort(409, $messages);        }        //update the user        if (!$this->groupsrepo->update($id)) {            abort(409);        }        $groups = $this->groupsrepo->search();				$list_employee = $this->groupsassignedrepository->search_employee();		$employees=[];		if(count($list_employee) > 0){						foreach($list_employee as $le){				$employees[$le->groupassigned_groupid][] = array(					'groupassigned_userid'	=> $le->groupassigned_userid,					'first_name'			=> $le->first_name,					'groupassigned_id'		=> $le->groupassigned_id,				);			}					}        //reponse payload        $payload = [            'groups' => $groups,						'list_employee'	=> $employees,						'str_source'	=> $str_source        ];        //generate a response        return new StoreResponse($payload);    }        /**     * Remove the specified team member from storage.     * @param int $id team member id     * @return \Illuminate\Http\Response     */    public function destroy($id) {        //get the item        if (!$groups = $this->groupsrepo->search($id)) {            abort(409);        }				$fullUrl = request()->fullUrl();		$_fullUrl = explode('?', $fullUrl);		$str_source = isset($_fullUrl[1]) ? str_replace('source=','', $_fullUrl[1]) : '';        //remove the item        $groups->first()->delete();		$groups = $this->groupsrepo->search();				$this->groupsassignedrepository->delete($id);				$list_employee = $this->groupsassignedrepository->search_employee();		$employees=[];		if(count($list_employee) > 0){						foreach($list_employee as $le){				$employees[$le->groupassigned_groupid][] = array(					'groupassigned_userid'	=> $le->groupassigned_userid,					'first_name'			=> $le->first_name,					'groupassigned_id'		=> $le->groupassigned_id,				);			}					}        //reponse payload        $payload = [            'groups' => $groups,						'list_employee'	=> $employees,						'str_source'	=> $str_source,        ];                //generate a response        return new StoreResponse($payload);    }    /**     * basic page setting for this section of the app     * @param string $section page section (optional)     * @param array $data any other data (optional)     * @return array     */    private function pageSettings($section = '', $data = []) {        //common settings        $page = [            'crumbs' => [                __('lang.team_members'),            ],            'crumbs_special_class' => 'list-pages-crumbs',            'page' => 'team',            'no_results_message' => __('lang.no_results_found'),            'mainmenu_settings' => 'active',            'mainmenu_team' => 'active',            'submenu_team' => 'active',            'sidepanel_id' => 'sidepanel-filter-team',            'dynamic_search_url' => 'team/search?source=' . request('source') . '&action=search',            'add_button_classes' => '',            'load_more_button_route' => 'team',            'source' => 'list',        ];        //default modal settings (modify for sepecif sections)        $page += [            'add_modal_title' => __('lang.add_group'),            'add_modal_create_url' => url('groups/create'),            'add_modal_action_url' => url('team'),            'add_modal_action_ajax_class' => '',            'add_modal_action_ajax_loading_target' => 'commonModalBody',            'add_modal_action_method' => 'POST',        ];        config([            //visibility - add project buttton            'visibility.list_page_actions_add_button' => true,        ]);        //contracts list page        if ($section == 'groups') {            $page += [                'meta_title' => __('lang.groups'),                'heading' => __('lang.groups'),            ];            if (request('source') == 'ext') {                $page += [                    'list_page_actions_size' => 'col-lg-12',                ];            }            return $page;        }        //create new resource        if ($section == 'create') {            $page += [                'section' => 'create',                'create_type' => 'group',            ];            return $page;        }        //edit new resource        if ($section == 'edit') {            $page += [                'section' => 'edit',            ];            return $page;        }        //ext page settings        if ($section == 'ext') {            $page += [                'list_page_actions_size' => 'col-lg-12',            ];            return $page;        }        //return        return $page;    }		public function assign($id) {	        if (!$groups = $this->groupsrepo->get($id)) {            abort(409, __('lang.user_not_found'));        }        //reponse payload		$list_employee = $this->groupsassignedrepository->search($id);		if(count($list_employee) > 0){			$employee=array();			foreach($list_employee as $le){				array_push($employee,$le->groupassigned_userid);			}			request()->merge([				'notin' => 1,				'list_employee' => $employee,			]);		}		request()->merge([						'status' => 'active',		]);        $users = $this->userrepo->search();        $payload = [            'page' => $this->pageSettings('edit'),                       'groups' => $groups,			            'users' => $users,                    ];        //process reponse        return new AssignResponse($payload);    }				public function process_assign($id) {        //custom error messages        $messages = [                   ];		$fullUrl = request()->fullUrl();		$_fullUrl = explode('?', $fullUrl);		$str_source = isset($_fullUrl[1]) ? str_replace('source=','', $_fullUrl[1]) : '';        //validate the form        $validator = Validator::make(request()->all(), [            'assigned' => 'required',        ], $messages);				        //validation errors        if ($validator->fails()) {            $errors = $validator->errors();            $messages = '';            foreach ($errors->all() as $message) {                $messages .= "<li>$message</li>";            }            abort(409, $messages);        }						if (request()->filled('assigned')) {						$messages_assigned = '';            foreach (request('assigned') as $user_id => $value) {								if((int)$value == 0){											$messages_assigned .= '<li>'.$value.' '. __('lang.assiged_user_not_found').'</li>';				}			}			if(!empty($messages_assigned))  abort(409, $messages_assigned);        }			        if (!$this->groupsassignedrepository->add($id)) {            abort(409);        }        //get user        $groups = $this->groupsrepo->search();				$list_employee = $this->groupsassignedrepository->search_employee();		$employees=[];		if(count($list_employee) > 0){						foreach($list_employee as $le){				$employees[$le->groupassigned_groupid][] = array(					'groupassigned_userid'	=> $le->groupassigned_userid,					'first_name'			=> $le->first_name,					'groupassigned_id'		=> $le->groupassigned_id,				);			}					}        //reponse payload        $payload = [            'groups' => $groups,						'list_employee'	=> $employees,						'str_source'	=> $str_source,        ];        //generate a response        return new StoreResponse($payload);    }		public function unassign($id) {				$fullUrl = request()->fullUrl();		$_fullUrl = explode('?', $fullUrl);		$str_source = isset($_fullUrl[1]) ? str_replace('source=','', $_fullUrl[1]) : '';				$this->groupsassignedrepository->unassign($id);		$groups = $this->groupsrepo->search();				$list_employee = $this->groupsassignedrepository->search_employee();		$employees=[];		if(count($list_employee) > 0){						foreach($list_employee as $le){				$employees[$le->groupassigned_groupid][] = array(					'groupassigned_userid'	=> $le->groupassigned_userid,					'first_name'			=> $le->first_name,					'groupassigned_id'		=> $le->groupassigned_id,				);			}					}        //reponse payload        $payload = [            'groups' => $groups,						'list_employee'	=> $employees,						'str_source'	=> $str_source,        ];        //generate a response        return new StoreResponse($payload);	}}