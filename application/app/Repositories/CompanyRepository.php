<?php/** -------------------------------------------------------------------------------- * This repository class manages all the data absctration for units * * @package    Grow CRM * @author     NextLoop *----------------------------------------------------------------------------------*/namespace App\Repositories;use App\Models\Company;use Illuminate\Http\Request;use Log;class CompanyRepository  {    /**     * The groups repository instance.     */    protected $company;    /**     * Inject dependecies     */    public function __construct(Company $company) {        $this->company = $company;    }    /**     * Search model     * @param int $id optional for getting a single, specified record     * @return object unit collection     */    public function search($id = '') {        $company = $this->company->newQuery();        //joins        //$units->leftJoin('users', 'users.id', '=', 'units.unit_creatorid');        // all client fields        $company->selectRaw('*');        if (is_numeric($id)) {            $company->where('company_id', $id);        }		        //default sorting        $company->orderBy('company_created', 'desc');        // Get the results and return them.        return $company->paginate(config('system.settings_system_pagination_limits'));    }	    /**     * Create a new record     * @return mixed int|bool     */    public function create($id=0) {        if((int)$id > 0){			if (!$company = $this->company->find($id)) {				return false;			}		}else{			$company = new $this->company;		}        //data        $company->company_name = request('company_name');            $company->company_address = request('company_address');            $company->company_name_official = request('company_name_official');            $company->company_contact = request('company_contact');            $company->company_mission = request('company_mission');            $company->company_vision = request('company_vision');            $company->company_values_culture = request('company_values_culture');                  $company->company_creatorid = auth()->id();        //save and return id        if ($company->save()) {            return $company->company_id;        } else {            return false;        }    }   		 public function get($id = '') {        //new query        $company = $this->company->newQuery();        //validation        if (!is_numeric($id)) {            return false;        }        $company->where('company_id', $id);        //sanity: client        return $company->first();    }		public function updateLogo($id) {        //get the company        if (!$company = $this->company->find($id)) {            return false;        }        //update logo        $company->company_logo = request('company_logo');        //save        if ($company->save()) {            return true;        } else {            Log::error("record could not be updated - database error", ['process' => '[CompanyRepository]', config('app.debug_ref'), 'function' => __function__, 'file' => basename(__FILE__), 'line' => __line__, 'path' => __file__]);            return false;        }    }		}