<?php/** -------------------------------------------------------------------------------- * This repository class manages all the data absctration for units * * @package    Grow CRM * @author     NextLoop *----------------------------------------------------------------------------------*/namespace App\Repositories;use App\Models\GroupRooms;use Illuminate\Http\Request;class GroupRoomsRepository  {    /**     * The groups repository instance.     */    protected $grouprooms;    /**     * Inject dependecies     */    public function __construct(GroupRooms $grouprooms) {        $this->grouprooms = $grouprooms;    }    /**     * Search model     * @param int $id optional for getting a single, specified record     * @return object unit collection     */    public function search($id = '') {        $grouprooms = $this->grouprooms->newQuery();        //joins        //$units->leftJoin('users', 'users.id', '=', 'units.unit_creatorid');        // all client fields        $grouprooms->selectRaw('*');        if (is_numeric($id)) {            $grouprooms->where('grouproom_id', $id);        }		 if (request()->filled('search_query')) {            $grouprooms->where('grouproom_name', 'LIKE', '%' . request('search_query') . '%');        }        //default sorting        $grouprooms->orderBy('grouproom_name', 'asc');        // Get the results and return them.        return $grouprooms->paginate(config('system.settings_system_pagination_limits'));    }	    /**     * Create a new record     * @return mixed int|bool     */    public function create() {        //save new user        $grouprooms = new $this->grouprooms;        //data        $grouprooms->grouproom_name = request('group_name');            $grouprooms->grouproom_creatorid =  auth()->id();        //save and return id        if ($grouprooms->save()) {            return $grouprooms->grouproom_id ;        } else {            return false;        }    }    /**     * update a record     * @param int $id record id     * @return mixed bool or id of record     */    public function update($id) {        //get the record        if (!$grouprooms = $this->grouprooms->find($id)) {            return false;        }        //general        $grouprooms->grouproom_name = request('group_name');           //save        if ($grouprooms->save()) {            return $grouprooms->grouproom_id;        } else {            return false;        }    }    public function get($id = '') {        //new query        $grouprooms = $this->grouprooms->newQuery();        //validation        if (!is_numeric($id)) {            return false;        }        $grouprooms->where('grouproom_id', $id);        return $grouprooms->first();    }}