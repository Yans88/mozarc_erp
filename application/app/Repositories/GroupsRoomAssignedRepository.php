<?php/** -------------------------------------------------------------------------------- * This repository class manages all the data absctration for units * * @package    Grow CRM * @author     NextLoop *----------------------------------------------------------------------------------*/namespace App\Repositories;use App\Models\GroupRoomAssigned;use Illuminate\Http\Request;use Log;class GroupsRoomAssignedRepository  {    /**     * The groups repository instance.     */    protected $grouproom_assigned;    /**     * Inject dependecies     */    public function __construct(GroupRoomAssigned $grouproom_assigned) {        $this->grouproom_assigned = $grouproom_assigned;    }    /**     * Search model     * @param int $id optional for getting a single, specified record     * @return object unit collection     */    public function search($id = '') {        $groups = $this->grouproom_assigned->newQuery();        //joins        //$units->leftJoin('users', 'users.id', '=', 'units.unit_creatorid');        // all client fields        $groups->selectRaw('grouproomassigned_userid,grouproomassigned_groupid');        if (is_numeric($id)) {            $groups->where('grouproomassigned_groupid', $id);        }        // Get the results and return them.        return $groups->get();    }			public function search_employee($id = '') {        $groups = $this->grouproom_assigned->newQuery();        //joins        $groups->leftJoin('users', 'users.id' , '=', 'grouproom_assigned.grouproomassigned_userid');        // all client fields        $groups->selectRaw('*');        if (is_numeric($id)) {            $groups->where('grouproom_id', $id);        }        //default sorting        $groups->orderBy('first_name', 'asc');        // Get the results and return them.				        return $groups->get();    }    /**     * Create a new record     * @return mixed int|bool     */    public function add($id) {        //save new user				$list = [];              		if (request()->filled('assigned')) {            foreach (request('assigned') as $user) {									$groups = new $this->grouproom_assigned;                 $groups->grouproomassigned_groupid = $id;				                $groups->grouproomassigned_userid = $user;   				                $groups->grouproomassigned_creatorid = auth()->id();                                $groups->save();                $list[] = $user;            }            //return array of users            return $list;        }        return $list;    }	public function delete($group_id = '') {		$query = $this->grouproom_assigned->newQuery();        $query->where('grouproomassigned_groupid', '=', $group_id);        $query->delete();    }    		public function unassign($id = '') {		$query = $this->grouproom_assigned->newQuery();        $query->where('grouproomassigned_id', '=', $id);        $query->delete();    }    }